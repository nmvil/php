// –∑–∞–¥–∞–µ–º –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const btnRetry = document.querySelector('#btnRetry');
const btnOver = document.querySelector('#btnOver');
const btnLess = document.querySelector('#btnLess');
const btnEqual = document.querySelector('#btnEqual');
const btnStart = document.querySelector('#btnStart');

// –∑–∞–¥–∞–µ–º –ø–æ–ª—è 
const minValueField = document.querySelector('#minValue')
const maxValueField = document.querySelector('#maxValue')
const orderNumberField = document.querySelector('#orderNumberField');
const answerField = document.querySelector('#answerField');

// —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let minValue = 0;
let maxValue = 100;
let orderNumber = 1;
let gameRun = true;
let answerNumber  = Math.floor((minValue + maxValue) / 2);
let answerStr = (IntToString(answerNumber).length < 20) ? IntToString(answerNumber) : answerNumber;

// –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
let question = ['–í—ã –∑–∞–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ', '–ú–æ–∂–µ—Ç —ç—Ç–æ', '–í–∏–¥–∏–º–æ —ç—Ç–æ', '–ù–∞–≤–µ—Ä–Ω–æ–µ'];
let success = ['–Ø –≤—Å–µ–≥–¥–∞ —É–≥–∞–¥—ã–≤–∞—é\nüòé', '–≠—Ç–æ –±—ã–ª–æ –ª–µ–≥–∫–æ!\nüòé', '–Ø –¥—É–º–∞–ª –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–æ–∂–Ω–µ–µ\nü§™']

// –Ø –Ω–µ –Ω–∞—à–µ–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Ç–∞–∫ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:

// array[Math.round(Math.random() * n];

// –¢–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–∏–ª—å–Ω–æ –∫–æ—Ä–æ—á–µ, –∏ –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥ –ø—Ä–æ—â–µ

// –£—Å–ª–æ–≤–∏—è –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫:
// let r = Math.round(Math.random() * n;
// switch (r){
// 	case 1:
// 		answerField.innerText = 'text1';
// 		break;
// 	case 2:
// 		answerField.innerText = 'text2';
// 		break;

// 	...	
// 	case n:
// 		answerField.innerText = 'text n';
// 		break;
// 	default:
// 		answerField.innerText = 'text0'
// }


btnStart.addEventListener('click', () => {
	minValue = (parseInt(minValueField.value) || 0);
	maxValue = (parseInt(maxValueField.value) || 100);
	minValue = (minValue >= 1000) ? 999 : (minValue <= -1000) ? -999 : minValue;
	maxValue = (maxValue >= 1000) ? 999 : (maxValue <= -1000) ? -999 : maxValue;
	minValue = (minValue >= 1000) ? 999 : (minValue <= -1000) ? -999 : minValue;
	answerNumber  = Math.floor((minValue + maxValue) / 2);
	answerStr = (IntToString(answerNumber).length < 20) ? IntToString(answerNumber) : answerNumber;
	orderNumber = 1;
	gameRun = true;
	orderNumberField.innerText = orderNumber;
	answerField.innerHTML = `–ó–∞–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${minValue} –¥–æ ${maxValue}<br>–í—ã –∑–∞–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${answerStr}?`;
})

// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
function IntToString(num) {
	let text = '';
	let dec = true;
	if (num < 0) {
		text += '–º–∏–Ω—É—Å ';
		num = Math.abs(num);
	} else if (num == 0) {
		text = '–Ω–æ–ª—å';
		return text;
	}
	// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ç–Ω–∏
	switch(Math.floor(num / 100)) {
		case 1:
			text += '—Å—Ç–æ ';
			break;
		case 2:
			text += '–¥–≤–µ—Å—Ç–∏ ';
			break;
		case 3:
			text += '—Ç—Ä–∏—Å—Ç–∞ ';
			break;
		case 4:
			text += '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞ ';
			break;
		case 5:
			text += '–ø—è—Ç—å—Å–æ—Ç ';
			break;
		case 6:
			text += '—à–µ—Å—Ç—å—Å–æ—Ç ';
			break;
		case 7:
			text += '—Å–µ–º—å—Å–æ—Ç ';
			break;
		case 8:
			text += '–≤–æ—Å–µ–º—å—Å–æ—Ç ';
			break;
		case 9:
			text += '–¥–µ–≤—è—Ç—å—Å–æ—Ç ';
			break;
	}
	num = num % 100;
	// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 10-99
	switch(Math.floor(num / 10)) {
		case 1:
			num = num % 10;
			// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ 10-19. –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –≤ —á–∏—Å–ª–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
			switch (num) {
				case 1:
					text += '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 2:
					text += '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 3:
					text += '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 4:
					text += '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 5:
					text += '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 6:
					text += '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 7:
					text += '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 8:
					text += '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				case 9:
					text += '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å';
					return text;
				default:
					text += '–¥–µ—Å—è—Ç—å';
					return text;
			}
			break;
		case 2:
			text += '–¥–≤–∞–¥—Ü–∞—Ç—å ';
			break;
		case 3:
			text += '—Ç—Ä–∏–¥—Ü–∞—Ç—å ';
			break;
		case 4:
			text += '—Å–æ—Ä–æ–∫ ';
			break;
		case 5:
			text += '–ø—è—Ç—å–¥–µ—Å—è—Ç ';
			break;
		case 6:
			text += '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç ';
			break;
		case 7:
			text += '—Å–µ–º—å–¥–µ—Å—è—Ç ';
			break;
		case 8:
			text += '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç ';
			break;
		case 9:
			text += '–¥–µ–≤—è–Ω–æ—Å—Ç–æ ';
			break;
	}
	// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã
	num = num % 10;
	switch (num) {
		case 1:
			text += '–æ–¥–∏–Ω';
			break;
		case 2:
			text += '–¥–≤–∞';
			break;
		case 3:
			text += '—Ç—Ä–∏';
			break;
		case 4:
			text += '—á–µ—Ç—ã—Ä–µ';
			break;
		case 5:
			text += '–ø—è—Ç—å';
			break;
		case 6:
			text += '—à–µ—Å—Ç—å';
			break;
		case 7:
			text += '—Å–µ–º—å';
			break;
		case 8:
			text += '–≤–æ—Å–µ–º—å';
			break;
		case 9:
			text += '–¥–µ–≤—è—Ç—å';
			break;
	}
	return text;
}

// –∫–Ω–æ–ø–∫–∞ "–∑–∞–Ω–æ–≤–æ"
btnRetry.addEventListener('click', function () {
	// minValue = (parseInt(prompt('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –∏–≥—Ä—ã','0')) || 0);
	// minValue = (minValue >= 1000) ? 999 : (minValue <= -1000) ? -999 : minValue;
	// maxValue = (parseInt(prompt('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –∏–≥—Ä—ã','100')) || 100);
	// maxValue = (maxValue >= 1000) ? 999 : (maxValue <= -1000) ? -999 : maxValue;
	// alert(`–ó–∞–≥–∞–¥–∞–π—Ç–µ –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç ${minValue} –¥–æ ${maxValue}, –∞ —è –µ–≥–æ —É–≥–∞–¥–∞—é`);
	// answerNumber  = Math.floor((minValue + maxValue) / 2);
	// let answerStr = (IntToString(answerNumber).length < 20) ? IntToString(answerNumber) : answerNumber;	
	// answerField.innerText = `–í—ã –∑–∞–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${answerStr}?`;
	// orderNumber = 1;
	// orderNumberField.innerText = orderNumber;
	// gameRun = true;
})

// –∫–Ω–æ–ø–∫–∞ "–±–æ–ª—å—à–µ"
btnOver.addEventListener('click', function () {
	if (gameRun){
		if (minValue === maxValue){
			const phraseRandom = Math.round( Math.random());
			const answerPhrase = (phraseRandom === 1) ?
				`–í—ã –∑–∞–≥–∞–¥–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!\nüò°` :
				`–Ø —Å–¥–∞—é—Å—å..\nüò§`;

			answerField.innerText = answerPhrase;
			gameRun = false;
		} else {
			minValue = answerNumber  + 1;
			answerNumber  = Math.floor((minValue + maxValue) / 2);
			let answerStr = (IntToString(answerNumber).length < 20) ? IntToString(answerNumber) : answerNumber;
			orderNumber++;
			orderNumberField.innerText = orderNumber;
			answerField.innerText = `${question[Math.round(Math.random() * 3)]} ${answerStr}?`;
		}
	}
})

// –∫–Ω–æ–ø–∫–∞ "–º–µ–Ω—å—à–µ"
btnLess.addEventListener('click', function () {
	if (gameRun){
		if (minValue === maxValue){
			const phraseRandom = Math.round(Math.random());
			const answerPhrase = (phraseRandom === 1) ?
				`–í—ã –∑–∞–≥–∞–¥–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!\nüò°` :
				`–Ø —Å–¥–∞—é—Å—å..\nüò§`;

			answerField.innerText = answerPhrase;
			gameRun = false;
		} else {
			maxValue = answerNumber  - 1;
			answerNumber  = Math.floor((minValue + maxValue) / 2);
			let answerStr = (IntToString(answerNumber).length < 20) ? IntToString(answerNumber) : answerNumber;
			orderNumber++;
			orderNumberField.innerText = orderNumber;
			answerField.innerText = `${question[Math.round(Math.random() * 3)]} ${answerStr}?`;
		}
	}
})

// –∫–Ω–æ–ø–∫–∞ "–≤–µ—Ä–Ω–æ"
btnEqual.addEventListener('click', function () {
	if (gameRun){
		answerField.innerText = success[Math.round(Math.random() * 2)]
		gameRun = false;
	}
})

